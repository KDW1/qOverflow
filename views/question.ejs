<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= question.title %></title>
  <link rel="stylesheet" href="/index.css">
  <link rel="stylesheet"
      href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/styles/default.min.css">
<script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/highlight.min.js"></script>
</head>
<!-- <script src="https://cdn.tailwindcss.com"></script> -->
<script>
        window.odometerOptions = {
  duration: 1, // Change how long the javascript expects the CSS animation to take
};
</script>
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<!-- <link rel="stylesheet" href="http://github.hubspot.com/odometer/themes/odometer-theme-default.css" />
<script src="http://github.hubspot.com/odometer/odometer.js"></script> -->
<% 
function msToTime(duration) {
  const portions = [];
    const msInDay = 1000 * 60 * 60 * 24;
  const days = Math.trunc(duration / msInDay);
  if (days > 0) {
    portions.push(days + 'd');
    duration = duration - (days * msInDay);
  }

  const msInHour = 1000 * 60 * 60;
  const hours = Math.trunc(duration / msInHour);
  if (hours > 0) {
    portions.push(hours + 'h');
    duration = duration - (hours * msInHour);
  }

  const msInMinute = 1000 * 60;
  const minutes = Math.trunc(duration / msInMinute);
  if (minutes > 0) {
    portions.push(minutes + 'm');
    duration = duration - (minutes * msInMinute);
  }

  const seconds = Math.trunc(duration / 1000);
  if (seconds > 0) {
    portions.push(seconds + 's');
  }

  return portions[0];
}
%>
<style>
  h1 {
    font-size: 2em;
    font-weight: normal;
    margin: 0.67em 0;
  }
  h2 {
    font-size: 1.5em;
    font-weight: normal;
    margin: 0.83em 0;
  }
  h3 {
    font-size: 1.17em;
    font-weight: normal;
    margin: 1em 0;
  }
  h4 {
    font-size: 1em;
    font-weight: normal;
    margin: 1.33em 0;
  }
  h5 {
    font-size: 0.83em;
    font-weight: normal;
    margin: 1.67em 0;
  }
  h6 {
    font-size: 0.67em;
    font-weight: normal;
    margin: 2.33em 0;
  }
  table {
    border-collapse: collapse;
    border-spacing: 0;
    align-items: center;
    align-self: center;
    align-content: center;
    outline: solid;
    width: 100%;
  }
  a {
    color: #0366d6;
  }
  a:hover {
    text-decoration: underline;
  }
  blockquote {
  background: #f9f9f9;
  border-left: 10px solid #ccc;
  margin: 1.5em 10px;
  padding: 0.5em 10px;
}
  ul {
    margin: 1.33em 0;
    padding: 0.5em 1em;


    list-style: disc;

list-style-position: inside;
  }
  ol {
    margin: 1.33em 0;
    padding: 0.5em 1em;
    list-style: decimal;
    list-style-position: inside;
  }
  li {
    margin-bottom: 0.33em;
  }
  code {
    font-family: Consolas, Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;
    font-size: 0.83em;
  }
  img {
    max-width: 50%;
  }
</style>
<body>  
  <script src="/socket.io/socket.io.js"></script>
  <div class="flex flex-col h-screen">
    <div class="py-0">
      <%-  include('../views/navbar.ejs', {signup: false, loggedIn}); %>
    </div>
    <!-- <div class="flex justify-center items-center flex-grow"> -->
      <div class="min-h-full">
      

          <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
            <div class="px-4 py-6 sm:px-0 rounded overflow-hidden shadow-lg">
              <div class="flex flex-row">
                
                <div class="flex content-center flex-col w-1/12">
                  <img class="rounded-lg cursor-pointer min-w-[30px]" id="questionUp" style="width: 50%; margin-left: auto; margin-right: auto;" src="<%= voted.voted && voted.vote == 'upvoted' ? '/voteSelected.png' : '/vote.png' %>" alt="">
                  <p class="text-center odometer" id="voteQ"><%= question.upvotes - question.downvotes %></p>
                  <img class="rounded-lg rotate-180 cursor-pointer min-w-[30px]" id="questionDown" style="width: 50%; margin-left: auto; margin-right: auto;"  src="<%= voted.voted && voted.vote == 'downvoted' ? '/voteSelected.png' : '/vote.png' %>" alt="">
                </div>
                <div></div>
                <div class="flex-grow">
                  <p class="text-4xl text-center py-5 "><b><%= question.title %></b></p> 
                  <hr/>
                  <p id="questionText" class="text-center ">
   
                  </p>
                  <div class="px-6 pt-4 pb-2 text-right">
                    <span class="inline-block place-content-stretch bg-gray-200  px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2"><center><p>By: <%= question.creator%> </p> <img src='' style="opacity:0%" width="50" height="50" id="qPfp" class="max-w-full h-auto rounded-full"><p id="levelText"></p></center></span>
                     <br>
                     <span class="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2"><%= msToTime(Date.now() - question.createdAt) ?? "just now" %> ago</span>
                     <span class="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2"><%= question.views %> views</span>
               
                     <span class="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2 ${data.hasAcceptedAnswer ? "text-green-800" : ""}"><%= question.answers %> answers</span>
                   </div>
                   <!-- show comments btn -->
                
                    <div class="flex flex-col justify-center items-center">
                      <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" id="showComments">Show Comments (<%= question.comments %>)</button>
                    
                      

                      <div id="commentsList">

                    </div>  
<br/>
                    <!--
                      post comment
                    -->
         
                 
               

                      <div class="flex flex-col justify-center items-center w-[50%]">

                        <textarea maxlength="150" rows="2" class="bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 my-2 px-4 text-gray-700 leading-tight resize-none focus:outline-none focus:bg-white focus:border-blue-500" id="commentText" type="text" placeholder="Comment"></textarea>
                        <button class="bg-green-500 hover:bg-green-700 text-white py-2 px-4 rounded" id="postComment">Post comment</button>
                      </div>
                 
                  
                </div>
              </div>
            </div>
          </div>
          <div id="answers">
            <div class="flex items-center justify-center flex-col px-[30px]">
              <div class=" my-5 rounded overflow-hidden shadow-lg min-w-full ">
                <% if(question.answers) { %>
               <div class="px-4 py-4 ">
                 <img class="animate-spin" width="100" height="100" src="https://media.24ways.org/2009/15/assets/img/spinner.png">
            
               </div>
               <% } %>
             </div>
            </div>
          </div>
          <!-- create answer -->
          <div class="flex items-center justify-center flex-col px-[30px]" id="createDiv" style="display: none;">
            <div class=" my-5 rounded overflow-hidden shadow-lg min-w-full ">
              <div class="px-4 py-4 ">
                <p> Know the solution? Then create an answer!</p>
              <br>
              <form id="createAnswerForm">
                <div class="flex flex-col">
                  <label class="text-gray-700 text-sm font-bold mb-2" for="answer">Your Answer</label>
                  <textarea wrap="hard" maxlength="3000" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="answerText" name="answer" rows="3"></textarea>
                </div>
                <br/>
                <div id="preview">
                  <div class="flex flex-col">
                    <label class="text-gray-700 text-sm font-bold mb-2" for="answer">Preview</label>
                    <div class="flex flex-col">
                      <p  class="text-gray-700 text-sm font-bold mb-2 border border-spacing-2 border-solid" id="previewText"></p>
                    </div>

                  </div>
                </div>

                </form>
                <br/>
                <!-- btn -->
                <div class="flex flex-col">
                  <button class="bg-gray-500 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" disabled type="button" id="createAnswer">
                    Create Answer
                  </button>
              </div>
            </div>
      </div>
  <!-- </div> -->
  <!-- create answer form-->
</div>
    <script>
      function msToTime(duration) {
  const portions = [];
    const msInDay = 1000 * 60 * 60 * 24;
  const days = Math.trunc(duration / msInDay);
  if (days > 0) {
    portions.push(days + 'd');
    duration = duration - (days * msInDay);
  }

  const msInHour = 1000 * 60 * 60;
  const hours = Math.trunc(duration / msInHour);
  if (hours > 0) {
    portions.push(hours + 'h');
    duration = duration - (hours * msInHour);
  }

  const msInMinute = 1000 * 60;
  const minutes = Math.trunc(duration / msInMinute);
  if (minutes > 0) {
    portions.push(minutes + 'm');
    duration = duration - (minutes * msInMinute);
  }

  const seconds = Math.trunc(duration / 1000);
  if (seconds > 0) {
    portions.push(seconds + 's');
  }

  return portions[0];
}
    document.getElementById('questionText').innerHTML =
      marked.parse(decodeURIComponent(`<%= encodeURIComponent(question.text) %>`));
   
      document.getElementById("questionUp").addEventListener("click", () => {
        var action = document.getElementById("questionUp").src.split("/")[document.getElementById("questionUp").src.split("/").length-1] === "vote.png" ? "increment" : "decrement";
        fetch('/api/question/<%= question.question_id %>/upvote', {
          method: 'POST',
          body: JSON.stringify({
            action
          }),
          headers: {
            'Content-Type': 'application/json'
          }
        }).then(response => response.json()).then((j) => {
          if(j.success) {
            document.getElementById("questionUp").src = action === "increment" ? "/voteSelected.png" : "/vote.png";
            // document.getElementById("questionDown").src = action === "increment" ? "/vote.png" : "/downvoted.png";
          }
        })
      })

      document.getElementById("questionDown").addEventListener("click", () => {
        var action = document.getElementById("questionDown").src.split("/")[document.getElementById("questionDown").src.split("/").length-1] === "vote.png" ? "increment" : "decrement";
        fetch('/api/question/<%= question.question_id %>/downvote', {
          method: 'POST',
          body: JSON.stringify({
            action
          }),
          headers: {
            'Content-Type': 'application/json'
          }
        }).then(response => response.json()).then((j) => {
          if(j.success) {
            document.getElementById("questionDown").src = action === "increment" ? "/voteSelected.png" : "/vote.png";
            // document.getElementById("questionDown").src = action === "increment" ? "/vote.png" : "/downvoted.png";
          }
        })
      })


      var curVotes = <%= question.upvotes - question.downvotes %>;
  const socket = io();
  socket.on("voteQ", ([id, dir]) => {
    if(id == "<%= question.question_id %>") {
      curVotes += dir;
      console.log(curVotes);
      document.getElementById("voteQ").innerHTML = curVotes;
    }
  })
  socket.on("voteA", ([q, id, dir]) => {
    if(q == "<%= question.question_id %>") {
      var curNum = Number(document.getElementById("voteA"+id).innerHTML)
      curNum += dir;
      document.getElementById("voteA"+id).innerHTML = curNum;
    }
  })

  fetch("/getBasicData?user=<%= question.creator %>").then(response => response.json()).then((j) => {
    if(j.success) {
      document.getElementById("qPfp").src = j.pfp;
      document.getElementById("qPfp").style.opacity = 1;
      document.getElementById("levelText").innerHTML = "Level "+j.level
    }
  })
  


async function appendAnswer(answer) {
  var id = answer.answer_id;
  var answerComments = answer.comments;

  var t= `<div class="max-w-5xl mx-auto px-9 py-[12px] rounded overflow-hidden shadow-lg">
            <div class="flex flex-row">
              <div class="flex content-center flex-col w-1/12">
                <img class="rounded-lg cursor-pointer min-w-[30px]" id="answerUp${answer.answer_id}" style="width: 50%; margin-left: auto; margin-right: auto;" src="/vote.png" alt="">
                <p class="text-center odometer" id="voteA${ answer.answer_id }">${ answer.upvotes - answer.downvotes }</p>
                <img class="rounded-lg rotate-180 cursor-pointer min-w-[30px]" id="answerDown${ answer.answer_id }" style="width: 50%; margin-left: auto; margin-right: auto;"  src="/vote.png" alt="">
              </div>

              <div class="flex-grow">
            <div class=" py-[12px] sm:px-[46px] lg:px-[46px] ">
              <div class="h-auto px-8">
                <p id="${ answer.answer_id }Text"> </p>

              </div>
            </div>
            <div class="px-6 pt-4 pb-2 text-right">
              <span class="inline-block place-content-stretch bg-gray-200  px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2"><center><p>By: ${ answer.creator} </p> <img src='' style="opacity:0%" width="50" height="50" id="aPfp${ answer.answer_id }" class="max-w-full h-auto rounded-full"><p id="levelText${ answer.answer_id }"></p></center></span>
               <br>
               <span class="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2">${ msToTime(Date.now() - answer.createdAt) ?? "just now" } ago</span>
                               </div>
                               <div class="flex flex-col justify-center items-center">
                      <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" id="showComments${id}">Show Comments (${answerComments})</button>
                    
                      

                      <div id="commentsList${id}">

                    </div>  
<br/>
                    <!--
                      post comment
                    -->
         
                 
               

                      <div class="flex flex-col justify-center items-center w-[50%]">

                        <textarea maxlength="150" rows="2" class="bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 my-2 px-4 text-gray-700 leading-tight resize-none focus:outline-none focus:bg-white focus:border-blue-500" id="commentText${id}" type="text" placeholder="Comment"></textarea>
                        <button class="bg-green-500 hover:bg-green-700 text-white py-2 px-4 rounded" id="postComment${id}">Post comment</button>
                      </div>
                 
                  
                </div>
          </div>
        </div>
        </div> `

// string to DOM element
var doc  = new DOMParser().parseFromString(t, "text/html");

        document.getElementById("answers").appendChild(doc.body.firstChild);
  document.getElementById(answer.answer_id+"Text").innerHTML = marked.parse(decodeURIComponent(answer.text));
  var userData = await fetch("/getBasicData?user="+answer.creator)
    userData = await userData.json();
    if(userData.success) {
      document.getElementById("aPfp"+answer.answer_id).src = userData.pfp;
      document.getElementById("aPfp"+answer.answer_id).style.opacity = 1;
      document.getElementById("levelText"+answer.answer_id).innerHTML = "Level "+userData.level
    }
    hljs.highlightAll();
   var js = await fetch('/hasUserVotedAnswer?answer='+answer.answer_id+"&question=<%= question.question_id %>")
   var j = await js.json();
      console.log("dfgdfgg", answer.answer_id);
    
      if(j.success) {
      console.log("dfgg", answer.answer_id);

      if(j.voted) {
        console.log("ffff", answer.answer_id);

        if(j.vote == "upvoted") {
          document.getElementById("answerUp"+answer.answer_id).src = "/voteSelected.png";
          console.log("upvoted", answer.answer_id);
        } else {
          document.getElementById("answerDown"+answer.answer_id).src = "/voteSelected.png";
          console.log("upvoted", answer.answer_id);

        }
      }
    }


  console.log("register", answer.answer_id);
  document.getElementById("answerUp"+answer.answer_id).onclick = () => {
    console.log("upvoted", answer.answer_id);
    var action = document.getElementById("answerUp"+answer.answer_id).src.split("/")[document.getElementById("answerUp"+answer.answer_id).src.split("/").length-1] === "vote.png" ? "increment" : "decrement";
    fetch('/api/answer/'+answer.answer_id+'/upvote', {
      method: 'POST',
      body: JSON.stringify({
        action,
        question: "<%= question.question_id %>"
      }),
      headers: {
        'Content-Type': 'application/json'
      }
    }).then(response => response.json()).then((j) => {
      if(j.success) {
        document.getElementById("answerUp"+answer.answer_id).src = action === "increment" ? "/voteSelected.png" : "/vote.png";
        // document.getElementById("answerUp"+answer.answer_id).src = action === "increment" ? "/vote.png" : "/downvoted.png";
      }
    });
  };
  document.getElementById("answerDown"+answer.answer_id).onclick =  () => {
    console.log("upvoted", answer.answer_id);

    var action = document.getElementById("answerDown"+answer.answer_id).src.split("/")[document.getElementById("answerDown"+answer.answer_id).src.split("/").length-1] === "vote.png" ? "increment" : "decrement";
    fetch('/api/answer/'+answer.answer_id+'/downvote', {
      method: 'POST',
      body: JSON.stringify({
        action,
        question: "<%= question.question_id %>"
      }),
      headers: {
        'Content-Type': 'application/json'
      }
    }).then(response => response.json()).then((j) => {
      if(j.success) {
        document.getElementById("answerDown"+answer.answer_id).src = action === "increment" ? "/voteSelected.png" : "/vote.png";
        // document.getElementById("answerDown"+answer.answer_id).src = action === "increment" ? "/vote.png" : "/downvoted.png";
      }
    });
  
    return;
  };

  var toggled = false;

 async function showThisCommentList() {
    document.getElementById("showComments"+id).innerHTML = "Hide comments ("+answerComments+")";
    document.getElementById("showComments"+id).disabled = true;
try {
   var f = await fetch('/answerComments', {method: 'POST', body: JSON.stringify({answer: id, question: "<%= question.question_id %>"}),         headers: {
          'Content-Type': 'application/json'
        }})
     var j = await f.json();


    document.getElementById("showComments"+id).disabled = false;
          
      if(j.success) {
        console.log("comments", j.comments);
        var comments = j.comments;
        var commentsList = document.getElementById("commentsList"+id);
        commentsList.innerHTML = "";
        for(var i = 0; i < comments.length; i++) {
          await appendComment(comments[i], id);
        }
      }
    } catch {
    document.getElementById("showComments"+id).disabled = true;

    }
  }

  function hideThisCommentList() {
    document.getElementById("commentsList"+id).innerHTML = "";
    document.getElementById("showComments"+id).innerHTML = "Show comments ("+answerComments+")";
  }

  document.getElementById("showComments"+id).onclick = async () => {
    console.log("show comments", id);
    if(!toggled) { 
      toggled = true;
 await showThisCommentList();
  } else {
    toggled = false;
hideThisCommentList();
  
  }
  }

  document.getElementById("postComment"+answer.answer_id).onclick = () => {
    var comment = document.getElementById("commentText"+answer.answer_id).value;
    if(comment.length > 0) {
      fetch('/addCommentAnswer', {
        method: 'POST',
        body: JSON.stringify({
          text: comment,
          question: "<%= question.question_id %>",
          answer: answer.answer_id
        }),
        headers: {
          'Content-Type': 'application/json'
        }
      }).then(response => response.json()).then(async(j) => {
        if(j.success) {
          answerComments++;
          
          if(toggled) {
            hideThisCommentList();
            await showThisCommentList();
            toggled = true;
          } else {
           await showThisCommentList();
           toggled =true;
          }

          document.getElementById("commentText"+answer.answer_id).value = "";

        }
      });
    }
  }


};
  fetch("/getAnswers?question=<%= question.question_id %>").then(response => response.json()).then(async (j) => {
    if(j.success) {
      document.getElementById("answers").innerHTML = "";
      // j.answers.forEach((answer) => {
      //   appendAnswer(answer);
      // })
      var alreadyAnswered=  false
      for (answer of j.answers) {
        await appendAnswer(answer);
        if(answer.creator =="<%= loggedIn ? username : "" %>") {
          alreadyAnswered = true
        }
      }
      console.log("alreadyAnswered", alreadyAnswered);
      if(!alreadyAnswered) {
        document.getElementById("createDiv").style.display = "block";
      }
      
    }
  })

  document.getElementById("answerText").addEventListener("keyup", () => {
    document.getElementById("previewText").innerHTML = marked.parse(document.getElementById("answerText").value);

    if(document.getElementById("answerText").value.length == 0) {
      document.getElementById("createAnswer").disabled = true;

      document.getElementById("createAnswer").classList.add("bg-gray-500");

      document.getElementById("createAnswer").classList.remove("bg-blue-500");
      document.getElementById("createAnswer").classList.remove("hover:bg-blue-700");

    } else {
      document.getElementById("createAnswer").disabled = false;

      document.getElementById("createAnswer").classList.remove("bg-gray-500");


      document.getElementById("createAnswer").classList.add("bg-blue-500");
      document.getElementById("createAnswer").classList.add("hover:bg-blue-700");
    }
  })

  document.getElementById("createAnswer").addEventListener("click", () => {
    fetch('/api/answer', {
      method: 'POST',
      body: JSON.stringify({
        text: document.getElementById("answerText").value,
        question: "<%= question.question_id %>"
      }),
      headers: {
        'Content-Type': 'application/json'
      }
    }).then(response => response.json()).then((j) => {
      if(j.success) {
        document.getElementById("answerText").value = "";
        document.getElementById("previewText").innerHTML = "";
        document.getElementById("createDiv").style.display = "none";
        appendAnswer(j.answer);
      }
    });
  });

  async function appendComment(comment, where="") {
    document.getElementById("commentsList"+where).innerHTML+="</br>"
    var commentDiv = document.createElement("div");
    commentDiv.classList.add("flex", "flex-col", "items-center", "justify-between", "w-full", "bg-white", "rounded-lg");
    commentDiv.id = "comment"+comment.comment_id;
    var commentText = document.createElement("div");
    commentText.classList.add("flex", "flex-col", "items-center", "justify-between", "w-full", "bg-white", "rounded-lg");
    commentText.innerHTML = "<b>"+comment.text.replace(/[\u00A0-\u9999<>\&]/g, function(i) {
   return '&#'+i.charCodeAt(0)+';';
})+"</b>";
    commentDiv.appendChild(commentText);
    var commentFooter = document.createElement("div");
    commentFooter.classList.add("flex", "flex-col", "items-center", "justify-between", "w-full", "bg-white",  "rounded-lg");
    var commentFooterText = document.createElement("div");
    commentFooterText.classList.add("flex", "flex-col", "items-center", "justify-between", "w-full", "bg-white", "rounded-lg");
    commentFooterText.innerHTML = "Created by "+comment.creator+", "+(msToTime(Date.now() - comment.createdAt) ?? "just now") +" ago";
    commentFooter.appendChild(commentFooterText);
    commentDiv.appendChild(commentFooter);

    


    document.getElementById("commentsList"+where).innerHTML+=(commentDiv.innerHTML);
   
  }

  var commentsToggle = false;
  var mainCommentsCnt = <%= question.comments %>;

  function hideComments(where="") {
    document.getElementById("commentsList"+where).innerHTML = "";
      document.getElementById("showComments"+where).innerHTML = `Show Comments (${mainCommentsCnt})`;
  }
  function showComments(where="") {
    document.getElementById("showComments"+where).innerHTML = `Hide Comments (${mainCommentsCnt})`;
      document.getElementById("showComments"+where).disabled = true;

      fetch("/questionComments?question=<%= question.question_id %>").then(response => response.json()).then(async (j) => {
      document.getElementById("showComments"+where).disabled = false;
        
        if(j.success) {
          for(comment of j.comments) {
            await appendComment(comment, where);
          }
        }
      }).catch(err => {console.log(err)
        document.getElementById("showComments"+where).disabled = false;
      });
  }
  document.getElementById("showComments").addEventListener("click", () => {
    if(commentsToggle) {
      commentsToggle = false;
      hideComments();
    } else {
      
      commentsToggle = true;
      showComments();


    }
  });

  document.getElementById("postComment").addEventListener("click", () => {
    document.getElementById("postComment").disabled = true;
    fetch('/addCommentQuestion', {
      method: 'POST',
      body: JSON.stringify({
        text: document.getElementById("commentText").value,
        question: "<%= question.question_id %>"
      }),
      headers: {
        'Content-Type': 'application/json'
      }
    }).then(response => response.json()).then((j) => {
      document.getElementById("postComment").disabled = false;
      if(j.success) {
        document.getElementById("commentText").value = "";
        mainCommentsCnt++;
        // document.getElementById("commentText").focus();
        if(!commentsToggle) {
          commentsToggle = true;
          showComments();
        } else {
          hideComments();
          showComments();
        }
      }
    }).catch(err => {console.log(err);
      document.getElementById("postComment").disabled = false;
    });
  });




    </script>
  </script>
</body>
</html>